// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  email              String         @unique
  password           String
  username           String
  lastname           String
  cedula             String
  phone              String
  rol                String
  performance_driver String?
  avatar             String?
  active_user        Boolean
  history_travel     Travel[]
  tasks              Tasks[]
  truck              Truck[]
  Notifications      Notification[]
  createdAt          DateTime       @default(now())
  updatesAt          DateTime       @updatedAt
}

model Tasks {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  type         String
  origen       String?
  destino      String?
  paradas      String[]
  indicaciones String[]
  state        String
  description  String?
  driverId     String   @db.ObjectId
  driver       Users    @relation(fields: [driverId], references: [id])
}

model Notification {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  description String
  read        Boolean
  userId      String  @db.ObjectId
  user        Users   @relation(fields: [userId], references: [id])
}

model Travel {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  distance    String?
  origin      String
  destination String
  stops       Stop[]
  driverId    String  @db.ObjectId
  truckId     String  @db.ObjectId
  driver      Users   @relation(fields: [driverId], references: [id])
  truck       Truck   @relation(fields: [truckId], references: [id])
}

model Stop {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  direction String
  latitude  String?
  longitude String?
  travelId  String  @db.ObjectId
  travel    Travel  @relation(fields: [travelId], references: [id])
}

model Truck {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  plate                String
  brand                String
  color                String
  rotation_programming String
  fuel_consumption     String
  model                String
  load_capacity        String
  photo                String?
  maintenance          Total_maintenance[]
  tires                Tires[]
  fuelId               String?             @unique @db.ObjectId
  driverId             String?             @db.ObjectId
  travel               Travel[]
  fuel                 Fuel?               @relation(fields: [fuelId], references: [id])
  availability         Availability?
  checklist            Checklist?
  driver               Users?              @relation(fields: [driverId], references: [id])
}

model Checklist {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  coolant       Boolean
  oil_level     Boolean
  tire_pressure Boolean
  lights        Boolean
  truckId       String  @unique @db.ObjectId
  truck         Truck   @relation(fields: [truckId], references: [id])
}

model Total_maintenance {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  date       String
  repairs    String
  next_event String
  truckId    String @unique @db.ObjectId
  truck      Truck  @relation(fields: [truckId], references: [id])
}

model Availability {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  mechanical_condition String
  fuel_level           String
  tire_pressure        String
  engine_performance   String
  truckId              String @unique @db.ObjectId
  truck                Truck  @relation(fields: [truckId], references: [id])
}

model Fuel {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  cost       Int
  efficiency String
  brand      String
  truck      Truck[]
}

model Tires {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  brand   String
  wear    String
  truckId String? @unique @db.ObjectId
  truck   Truck?  @relation(fields: [truckId], references: [id])
}
